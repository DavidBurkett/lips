<pre>
  LIP: 004
  Layer: Consensus (soft fork)
  Title: One-Sided Transactions in Mimblewimble (Consensus layer)
  Author: David Burkett <davidburkett38@gmail.com>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/litecoin/lips/wiki/Comments:LIP-0004
  Status: Draft
  Type: Standards Track
  Created: 2020-02-28
  License: PD
</pre>

==Abstract==

This LIP introduces a method for sending transactions on the Mimblewimble Extension Block (MW EB) without the need to build a transaction interactively with the receiving party.

==Motivation==

In the traditional approach to Mimblewimble, sending coins from one person to another requires the sender and receiver to interact in order to build a valid transaction. This can be a source of frustration, since it requires users to be online and listening in order to receive coins. This also makes cold storage much more difficult, and opens up additional opportunities for metadata leakage or MITM attacks.

Non-interactive transactions are favorable in most situations, since private keys only need to be accessible when spending funds. They also allow for on-chain payment proofs, which is something possible for most blockchains, but not for chains using traditional Mimblewimble.

==Design==

===Background===

It's long been the belief of most that non-interactive transactions were not possible in mimblewimble, since knowledge of an output's blinding factor is necessary to create rangeproofs and to build the schnorr signature.

To solve this, we must first find a way for both the sender and the receiver to know the blinding factor, but nobody else. Diffie-Hellman is perfect for this. The sender simply generates a keypair, performs ECDH with the receiver's pubkey, and generates a shared secret, which can be used as the blinding factor. The sender can then generate the receiver's outputs, blinding factors, and signature to create a valid transaction. But this presents 2 obvious problems.

The first problem is the sender still has to communicate their public key and the value to the receiver, so we need to somehow commit to that data as part of the output without affecting privacy.

The second problem is both Alice and Bob end up with the keys to the funds, which means Bob doesn't become exclusive owner of the funds, and it's impossible to resolve disputes. We need a way to verify that only Bob can spend the output.

===Naive Solution===

It's possible to commit to additional data in outputs without affecting security or prunability by using the [https://github.com/ElementsProject/secp256k1-zkp/blob/9c3ba0cfb98e2b1029fcd09ad8bf5e09edbe5b23/include/secp256k1_bulletproofs.h#L180 extra_commit] field in the rangeproof.

Since we have a way to commit to additional data, the sender can generate the blinding factor of the receiver's outputs, encrypt the blinding factor and value so that only the sender and receiver can decrypt it, and commit to the encrypted data as part of the UTXO. We now effectively have a 1-of-2 multisig output that either the sender or receiver can spend.

To ensure only the receiver can then spend the output, the sender can also commit to the receiver's public key ('''receiver_pubkey'''). The protocol can then be modified such that sending an output requires the sender to include a signature, proving knowledge of the receiver.

===Problems===

At first glance, this approach seems to work. But it introduces 3 additional problems:
# Since the receiver learns the blinding factor of the output, she can use it to modify the UTXO before it's included in a block. She then can plausibly deny ever receiving the funds.
# Input signatures can be reused, since there's no randomness to sign without linking an input to a kernel or output. That means if Alice sends to Bob, and Bob later sends to Charlie, Alice can force a short reorg and reuse Bob's signature to send the funds back to herself.
# Cut-through can cause the output to be removed before ever being included in a block. This means if Alice sends to Bob, Bob could immediately send to Charlie, and no record will exist on the blockchain for Alice to prove she sent the funds to Bob.

===Revised Solution===

These new problems can actually be solved by applying a concept similar to the balance equation at the heart of the Mimblewimble protocol. In traditional Mimblewimble, we have the following balance equation to ensure no unexpected inflation occured:

(i) '''sum(output.commitment) - sum(input.commitment) == total_supply*H + sum(kernel.commitment) + kernel_offset*G'''

As it turns out, if we add a second, similar balance equation to the protocol, we can solve all 3 of the above mentioned problems. We change our naive solution by adding a blinding factor to the transaction ('''owner_offset'''). This allows us to apply a new validation rule for every new block that requires the following relation hold:

(ii) '''sum(output.sender_pubkey) - sum(input.receiver_pubkey * hash(input.receiver_pubkey)) == sum(owner_offset)*G'''

==Specification==

This section will detail the transaction model changes and consensus rules for implementing one-sided MW transactions. This specification builds upon the mimblewimble proposal detailed in [https://github.com/litecoin-project/lips/blob/master/lip-0003.mediawiki LIP-0003].

The ability to commit to additional data in a UTXO allows us to require a new block of data ('''output_data''') on all UTXOs. This will contain:
* sender's ephemeral pubkey
* receiver's pubkey
* encrypted data using '''ECDHE(sender's key, receiver's key)'''. Will contain: output value & blinding factor
* signature of '''output_data''' using sender's key

:: [[File:lip-0004/tx-model.png]]

Spending the output later requires proving knowledge of the receiver's secret key. This can be proven by revealing the owner "excess", which is calculated as '''sum(output.sender_privkey) - sum(input.receiver_privkey * hash(input.receiver_pubkey))'''.
For extra security, this excess will be split into 2 parts, '''owner_offset''' and '''owner_proof.commitment''', similar to how we split kernel excess into a raw '''kernel_offset''' and a '''kernel.commitment'''. Unlike kernels, '''owner_proof'''s can be pruned beyond the horizon.

The following validation rules will be added on top of all existing MW validation rules:
# The '''output_data''' (blue section in output) must be committed to for each utxo
# '''sender_signature''' in each '''output_data''' must be a valid signature of '''receiver_pubkey || public_nonce || encrypted_data''' for '''sender_pubkey'''
# '''input_signature''' for each input must be a valid signature of '''TBD''' for '''receiver_pubkey''' of the output it spends
# '''owner_signature''' for each '''owner_proof''' must be a valid signature of the hash of a kernel in the block
# '''sum(output.sender_pubkey) - sum(input.receiver_pubkey * hash(input.receiver_pubkey)) == sum(owner_offset)*G + sum(owner_proof.commitment)''' must hold true for every new block

==Security==

Because both the sender and receiver know the blinding factor of an output, it's no longer enough to verify the current UTXO set against the kernels. Owner excesses ('''owner_offsets''' and '''owner_proofs''') must be verified for all recent blocks. We recommend new nodes verify all input signatures for the most recent blocks up to the cut-through horizon, since all full nodes should already have access to those blocks.

This still leaves one attack that isn't possible today. The attack works as follows (assume input signatures verified for the past week):

* Alice creates a transaction containing an output for Bob.
* Bob sends Alice the goods she purchased.
* Several weeks (or perhaps even years) pass where Bob has not yet spent his coins.
* Alice forces a large reorg beyond the horizon. She can then send Bob's output back to herself, since she knows the blinding factor, and '''owner_offsets''' aren't validated for transactions in blocks beyond the horizon.

While this attack theoretically allows you to spend coins of any age, they have to be coins the attacker previously sent, and have not yet been spent by the receiver. However, the financial incentives provided by this attack are unlikely to be larger than those of much shorter reorgs today. For the extra cautious though, simply self-spending coins when you receive large amounts would prevent this attack, at the minimal cost of an additional kernel.

==Stealth Addresses==

Stealth addresses can be supported using the ''Dual-Key Stealth Address Protocol (DKSAP)''. Using this protocol, the receiver's permanent address consists of a permanent address ('''A''', '''B'''), where '''A''' is the scan pubkey used for identifying outputs, and '''B''' is the spend pubkey.

To generate a one-time address for the receiver, the sender must:
# Generate a random nonce keypair ('''r''', '''public_nonce''')
# Include '''public_nonce''' in the '''output_data'''
# Calculate the '''receiver_pubkey''' as '''(hash(rA)*G + B)'''

The receiver can identify outputs belonging to them by grinding through each output. If they come across an output whose '''receiver_pubkey''' is '''(hash(aR)*G + B)''', then the receiver knows the output is their own.

==Payment Proofs==

A payment proof shall consist of the output and rangeproof, merkle proofs proving the pair were in the output & rangeproof PMMRs, and a signature proving knowledge of the '''sender_privkey'''. If stealth addresses are used, the private nonce '''r''' must also be included in the payment proof.

==Deployment==

This will be activated alongside [https://github.com/litecoin-project/lips/blob/master/lip-0003.mediawiki LIP-0003].

==Credits==

Special thanks to Hansie Odendaal, Phyro, and John Tromp for their valuable feedback on earlier iterations of this design.

==References==

https://gist.github.com/DavidBurkett/32e33835b03f9101666690b7d6185203

==Copyright==

This document is placed in the public domain.
